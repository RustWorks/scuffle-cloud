#![cfg_attr(coverage_nightly, feature(coverage_attribute))]
#![deny(missing_docs)]
#![deny(unreachable_pub)]
#![deny(clippy::undocumented_unsafe_blocks)]
#![deny(clippy::multiple_unsafe_ops_per_block)]

//! Tinc
//! TODO: crate docs.

#[doc(hidden)]
pub mod reexports {
    #[cfg(feature = "tonic")]
    pub use tonic;
    pub use {axum, bytes, chrono, http, linkme, mediatype, regex, serde, serde_derive, serde_json, serde_repr};
    #[cfg(feature = "prost")]
    pub use {prost, prost_types};
}

#[doc(hidden)]
#[path = "private/mod.rs"]
pub mod __private;

pub mod well_known;

/// TincServices are typically generated by the `tinc-build`
/// crate and this trate lets you convert the service
/// into an axum router.
pub trait TincService {
    /// Convert the service into an axum router.
    fn into_router(self) -> axum::Router;

    // /// Get the openapi spec for the tinc service
    // fn openapi_spec_str(&self) -> &'static str;
}

/// Include the proto by specifying the package.
#[macro_export]
macro_rules! include_proto {
    ($package:tt) => {
        include!(concat!(env!("OUT_DIR"), concat!("/", $package, ".rs")));
    };
}
